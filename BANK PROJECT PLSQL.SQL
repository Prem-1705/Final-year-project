-- MASTER TABLE TTSBANK_BANKS
CREATE TABLE TTSBANK_BANKS(BANK_ID NUMBER,
BANK_CODE VARCHAR(50) UNIQUE,
BANK_LOCATION VARCHAR(50) ,
IS_HEADOFFICE VARCHAR(1) CHECK (UPPER(IS_HEADOFFICE) LIKE 'Y' OR UPPER(IS_HEADOFFICE) LIKE 'N'),
CONSTRAINT PK_BANK_ID PRIMARY KEY (BANK_ID)
);

-- MASTER TABLE TTSBANK_PRODUCTS
CREATE TABLE TTSBANK_PRODUCTS(PRODUCT_ID NUMBER PRIMARY KEY,
PRODUCT_NAME VARCHAR(50) ,
PRODUCT_CODE VARCHAR(50)  UNIQUE
);

-- MASTER TABLE TTSBANK_SUB_PRODUCTS
CREATE TABLE TTSBANK_SUB_PRODUCTS(SUB_PRODUCT_ID NUMBER PRIMARY KEY,
PRODUCT_ID NUMBER REFERENCES TTSBANK_PRODUCTS(PRODUCT_ID),
FEATURES VARCHAR(50) ,
BALANCE_LIMIT NUMBER ,
WITHDRAW_LIMIT NUMBER 
);

select * from ttsbank_sub_products;

--MASTER TABLE EMPLOYEES DETAILS
CREATE TABLE TTSBANK_EMPLOYEES(EMPLOYEE_ID NUMBER PRIMARY KEY,
EMPLOYEE_NAME VARCHAR(50),
BANK_ID NUMBER REFERENCES TTSBANK_BANKS(BANK_ID)
); 

DROP TABLE TTSBANK_EMPLOYEES PURGE;

--CUSTOMER DETAILS
CREATE TABLE TTSBANK_CUSTOMERS(CUSTOMER_ID NUMBER PRIMARY KEY,
CUSTOMER_NAME VARCHAR(50) ,
CUSTOMER_PHNO NUMBER   ,
CUSTOMER_MAIL VARCHAR(50)  ,
AADHAR_NO NUMBER  ,
PAN_NO VARCHAR(10)  ,
PASSWORD VARCHAR(50)  );

DROP TABLE TTSBANK_CUSTOMERS PURGE;

--CUSTOMER PRODUCT DETAIL
CREATE TABLE TTSBANK_CUS_PRODUCTS(CUS_PRODUCT_ID NUMBER PRIMARY KEY,
SUB_PRODUCT_ID NUMBER REFERENCES TTSBANK_SUB_PRODUCTS(SUB_PRODUCT_ID),
CUSTOMER_ID NUMBER REFERENCES TTSBANK_CUSTOMERS(CUSTOMER_ID),
ACCOUNT_NO NUMBER ,
ACCOUNT_OPEN_ON DATE ,
STATUS VARCHAR(50) ,
AVAILABE_BALANCE NUMBER ,
BANK_ID NUMBER REFERENCES TTSBANK_BANKS(BANK_ID)
);

DROP TABLE TTSBANK_CUS_PRODUCTS PURGE;

--CUSTOMER TRANSACTION DETAILS
CREATE TABLE TTSBANK_CUS_TRANSACTIONS(CUS_TRANS_ID NUMBER PRIMARY KEY,
CUS_PRODUCT_ID NUMBER REFERENCES TTSBANK_CUS_PRODUCTS(CUS_PRODUCT_ID),
TRANS_AMOUNT NUMBER ,
TRANS_TYPE VARCHAR(1) ,
TRANS_ON DATE ,
BENEF_ACCOUNT VARCHAR(50) ,
TRANS_MODE VARCHAR(50) ,
ACCOUNT_BALANCE NUMBER 
);

DROP TABLE TTSBANK_CUS_TRANSACTIONS PURGE;

--CUSTOMER PASSWORD TRACK
CREATE TABLE TTSBANK_PASSWORD_TRACK(TRACK_ID NUMBER PRIMARY KEY,
CUSTOMER_ID NUMBER REFERENCES TTSBANK_CUSTOMERS(CUSTOMER_ID),
CUSTOMER_PASSWORD VARCHAR(50) ,
PASSWORD_CHANGED_ON DATE
);

begin
INSERT INTO ttsbank_sub_products (sub_product_id, product_id, features, balance_limit, withdraw_limit) 
VALUES (3000, 2000, 'Silver', 5000, 50000);
INSERT INTO ttsbank_sub_products (sub_product_id, product_id, features, balance_limit, withdraw_limit) 
VALUES (3001, 2000, 'Gold', 10000, 100000);
INSERT INTO ttsbank_sub_products (sub_product_id, product_id, features, balance_limit, withdraw_limit) 
VALUES (3002, 2000, 'Platinum', 15000, 2500000);
COMMIT; -- Save the changes permanently
end;
/

SELECT * FROM TTSBANK_SUB_PRODUCTS;

begin
INSERT INTO ttsbank_banks (bank_id, bank_code, bank_location, is_headoffice) 
VALUES (1000, 'ttsbnk001', 'chennai', 'y');
INSERT INTO ttsbank_banks (bank_id, bank_code, bank_location, is_headoffice) 
VALUES (1001, 'ttsbnk002', 'madurai', 'n');
INSERT INTO ttsbank_banks (bank_id, bank_code, bank_location, is_headoffice) 
VALUES (1002, 'ttsbnk003', 'coimbatore', 'n');
COMMIT; -- Save the changes permanently
end;
/

begin
INSERT INTO ttsbank_products (product_id, product_name, product_code) 
VALUES (2000, 'savings bank', 'sb');
INSERT INTO ttsbank_products (product_id, product_name, product_code) 
VALUES (2001, 'current', 'cb');
INSERT INTO ttsbank_products (product_id, product_name, product_code) 
VALUES (2002, 'business', 'bb');
COMMIT; -- Save the changes permanently
end;
/

CREATE SEQUENCE SQCUSID START WITH 5000 INCREMENT BY 1;--sequence for customer id

CREATE SEQUENCE SQCUSTRANS START WITH 7000 INCREMENT BY 1;--squence for cus transaction id

CREATE SEQUENCE SQCUSPROD START WITH 8000 INCREMENT BY 1;--sequence vof cus product id 

CREATE  SEQUENCE SQACCNO START WITH 10000000000 INCREMENT BY 1;-- sequance for account number

CREATE SEQUENCE TRACK_ID_PASSOWRD START WITH 6000 INCREMENT BY 1;

CREATE OR REPLACE PROCEDURE SP_NEW_ACCOUNTS (
P_customer_name IN VARCHAR,--1
P_customer_phno IN NUMBER,--2
P_customer_mail IN VARCHAR,--3
P_aadhar_no IN NUMBER,--4
P_pan_no IN varchar,--5
P_password IN VARCHAR,--6
P_sub_product_id IN NUMBER,--7
P_status IN VARCHAR,--8
P_bank_id IN NUMBER,--9
P_trans_amount IN NUMBER,--10
P_trans_type IN VARCHAR,--11
P_BENEF_ACCOUNT IN VARCHAR,--12
P_trans_mode IN VARCHAR,--13
P_FLAG IN NUMBER,
P_cusTOMER_id IN NUMBER,
P_MESSAGE OUT VARCHAR,
P_MESSAGE_PASS OUT VARCHAR
) AS
L_CUSTOMER_ID NUMBER;
L_CUS_PRODUCT_ID NUMBER;
L_AVAILABE_BALANCE NUMBER;
SUM_A NUMBER;
SUB_A NUMBER;
L_BALANCE_LIMIT number;
L_SUM_TRANS_AMOUNT number;
CK NUMBER;
CNTNUM NUMBER;
couunt number;
BEGIN
IF P_FLAG=1 THEN
INSERT INTO TTSBANK_CUSTOMERS(customer_id,  customer_name,  customer_phno,	CUSTOMER_MAIL,	aadhar_no,	pan_no,	password) 
VALUES(SQCUSID.NEXTVAL,P_customer_name,P_customer_phno,P_customer_mail,P_aadhar_no,P_pan_no,P_password)RETURNING CUSTOMER_ID INTO L_CUSTOMER_ID;
INSERT INTO TTSBANK_CUS_PRODUCTS(cus_product_id,	sub_product_id,	customer_id,	account_no,	account_open_on,	status,	AVAILABE_BALANCE,	bank_id)
VALUES(SQCUSPROD.NEXTVAL,P_sub_product_id,L_CUSTOMER_ID,SQACCNO.NEXTVAL,SYSDATE,P_status,P_trans_amount,P_bank_id)RETURNING CUS_PRODUCT_ID,AVAILABE_BALANCE INTO L_CUS_PRODUCT_ID,L_AVAILABE_BALANCE;
INSERT INTO TTSBANK_CUS_TRANSACTIONS(cus_trans_id,	cus_product_id,	trans_amount,	trans_type,	trans_on,	benef_account,	trans_mode,	account_balance)
VALUES(SQCUSTRANS.NEXTVAL,L_CUS_PRODUCT_ID,P_trans_amount,P_trans_type,SYSDATE,P_BENEF_ACCOUNT,P_trans_mode,P_trans_amount);
ELSIF P_FLAG=2 THEN
    IF UPPER(P_trans_type)='C' THEN
        SELECT CUS_PRODUCT_ID INTO L_CUS_PRODUCT_ID FROM TTSBANK_CUS_PRODUCTS WHERE CUSTOMER_ID=P_CUSTOMER_ID AND SUB_PRODUCT_ID=P_SUB_PRODUCT_ID ;
        SELECT AVAILABE_BALANCE INTO L_AVAILABE_BALANCE FROM TTSBANK_CUS_PRODUCTS WHERE CUSTOMER_ID=P_CUSTOMER_ID AND SUB_PRODUCT_ID=P_SUB_PRODUCT_ID ;
        SELECT P_trans_amount+L_AVAILABE_BALANCE INTO SUM_A FROM DUAL;
        INSERT INTO TTSBANK_CUS_TRANSACTIONS(cus_trans_id,	cus_product_id,	trans_amount,	trans_type,	trans_on,	benef_account,	trans_mode,	account_balance) 
        VALUES(SQCUSTRANS.NEXTVAL,L_CUS_PRODUCT_ID,P_trans_amount,P_trans_type,SYSDATE,P_BENEF_ACCOUNT,P_trans_mode,SUM_a);
        update TTSBANK_CUS_PRODUCTS set AVAILABE_BALANCE=sum_a;
         ELSIF UPPER(P_trans_type)='D' THEN
         SELECT CUS_PRODUCT_ID INTO L_CUS_PRODUCT_ID FROM TTSBANK_CUS_PRODUCTS WHERE CUSTOMER_ID=P_CUSTOMER_ID AND SUB_PRODUCT_ID=P_SUB_PRODUCT_ID;
         SELECT AVAILABE_BALANCE INTO L_AVAILABE_BALANCE FROM TTSBANK_CUS_PRODUCTS WHERE CUSTOMER_ID=P_CUSTOMER_ID AND SUB_PRODUCT_ID=P_SUB_PRODUCT_ID;  
         select case when bal-amo<=bal then 0 else 1 end INTO CK  from
 (select (select NVL(sum(trans_amount),0) from ttsbank_cus_transactions where upper(trans_type)='D' and cus_product_id=L_CUS_PRODUCT_ID and trunc(trans_on)=trunc(sysdate) group by trunc(trans_on)) amo, 
 (select balance_limit from ttsbank_sub_products where  sub_product_id=P_SUB_PRODUCT_ID) bal from dual);
         IF CK=0 THEN
         SELECT L_AVAILABE_BALANCE-P_TRANS_AMOUNT INTO SUB_A FROM DUAL;   
         if sign(sub_a)=-1  then
         dbms_output.put_line('Insufficient balance');
         else
        INSERT INTO TTSBANK_CUS_TRANSACTIONS(cus_trans_id,	cus_product_id,	trans_amount,	trans_type,	trans_on,	benef_account,	trans_mode,	account_balance) 
        VALUES(SQCUSTRANS.NEXTVAL,L_CUS_PRODUCT_ID,P_trans_amount,P_trans_type,SYSDATE,P_BENEF_ACCOUNT,P_trans_mode,SUB_A);
        update TTSBANK_CUS_PRODUCTS set AVAILABE_BALANCE=sub_a;
         end if;
         ELSE 
         DBMS_OUTPUT.PUT_LINE('DATA LIMIT IS  REACHED');
        END IF;
END IF;
ELSIF (P_FLAG=3) THEN -- EXISTING USER CREATING NEW PRODUCT 
SELECT COUNT(USB) INTO COUUNT FROM
(SELECT SUB_PRODUCT_ID AS USB,CUSTOMER_ID FROM TTSBANK_CUS_PRODUCTS WHERE CUSTOMER_ID=(SELECT CUSTOMER_ID FROM TTSBANK_CUS_PRODUCTS WHERE SUB_PRODUCT_ID=P_SUB_PRODUCT_ID) AND CUSTOMER_ID=P_CUSTOMER_ID);
IF (COUUNT=0) THEN
INSERT INTO TTSBANK_CUS_PRODUCTS(CUS_PRODUCT_ID,SUB_PRODUCT_ID,CUSTOMER_ID,ACCOUNT_NO,ACCOUNT_OPEN_ON,STATUS,AVAILABE_BALANCE,BANK_ID)VALUES(SQCUSPROD.NEXTVAL,P_SUB_PRODUCT_ID,P_CUSTOMER_ID,SQCURACCNO.NEXTVAL,SYSDATE,'ACTIVE',L_AVAILABE_BALANCE,P_BANK_ID)RETURNING CUS_PRODUCT_ID INTO L_CUS_PRODUCT_ID ;
INSERT INTO TTSBANK_CUS_TRANSACTIONS(CUS_TRANS_ID,CUS_PRODUCT_ID,TRANS_AMOUNT,TRANS_TYPE,TRANS_ON,BENEF_ACCOUNT,TRANS_MODE,ACCOUNT_BALANCE)VALUES(SQCUSTRANS.NEXTVAL,L_CUS_PRODUCT_ID,P_TRANS_AMOUNT,P_TRANS_TYPE,SYSDATE,P_BENEF_ACCOUNT,P_TRANS_MODE,P_TRANS_AMOUNT);
ELSE 
DBMS_OUTPUT.PUT_LINE('ACCOUNT ALREADY EXIST');
END IF;
elsif p_flag=4 then
SELECT COUNT(*) INTO CNTNUM FROM
(SELECT CUSTOMER_PASSWORD FROM
(SELECT * FROM ttsbank_password_track  ORDER BY PASSWORD_CHANGED_ON DESC) WHERE ROWNUM<=2 and customer_id=p_customer_id
UNION
SELECT PASSWORD FROM TTSBANK_CUSTOMERS where customer_id=p_customer_id) WHERE P_PASSWORD IN CUSTOMER_PASSWORD;
IF CNTNUM=0  THEN
UPDATE ttsbank_customers SET PASSWORD=P_PASSWORD WHERE CUSTOMER_ID=P_CUSTOMER_ID  ;
P_MESSAGE_PASS:='PASSWORD CHANGED SUCCESSFULLY';
ELSE
DBMS_OUTPUT.PUT_LINE('PASSWORD ALREADY EXIST');
END IF;
END IF;
P_MESSAGE:='SUCCESS';
EXCEPTION
WHEN OTHERS THEN
dbms_output.put_line(sqlerrm);
dbms_output.put_line(sqlcode);
END;
/

SELECT * FROM USER_ERRORS;

DECLARE
MESSAGE VARCHAR(50);
PASSWORDS VARCHAR(50);
BEGIN
SP_NEW_ACCOUNTS(P_customer_name =>NULL,
P_customer_phno =>NULL,
P_customer_mail =>NULL,
P_aadhar_no =>NULL,
P_pan_no =>NULL,
P_password =>'144',
P_sub_product_id =>3000,
P_status =>'ACTIVE',
P_bank_id=> 1000,
P_trans_amount =>500,
P_trans_type =>'d',
P_BENEF_ACCOUNT =>'prem.icici',
P_trans_mode =>'gpay',
P_MESSAGE => message,
P_MESSAGE_PASS =>PASSWORDS,
P_FLAG =>4,
P_cusTOMER_id=>5060);
dbms_output.put_line(message);
dbms_output.put_line(PASSWORDS);
END;
/


CREATE OR REPLACE TRIGGER PASS_UPDATE BEFORE UPDATE OF PASSWORD ON TTSBANK_CUSTOMERS FOR EACH ROW
BEGIN
INSERT INTO ttsbank_password_track VALUES(TRACK_ID_PASSOWRD .NEXTVAL,:OLD.CUSTOMER_ID,:OLD.PASSWORD,SYSDATE);
END;
/

CREATE OR REPLACE PROCEDURE SP_DELETE_PASSWORD AS
BEGIN
for i in (select unique customer_id from TTSBANK_PASSWORD_TRACK ) loop
delete TTSBANK_PASSWORD_TRACK where customer_id=i.customer_id and customer_password not in --(2222,3333)
(SELECT * from
(SELECT CUSTOMER_PASSWORD FROM TTSBANK_PASSWORD_TRACK where customer_id=i.customer_id ORDER BY PASSWORD_CHANGED_ON DESC) where rownum<3);
end loop;
END;
/


begin
dbms_scheduler.create_job(
job_name=>'sch_delete',
job_type=> 'stored_procedure',
job_action=>'sp_delete_password',
start_date=>'17/FEB/2025 3:10:50 PM',
repeat_interval=>'freq=secondly;interval=5',
end_date=>'17/FEB/2025 3:12:50 PM',
auto_Drop=>false,
comments=>'DELETE SUCCESSFULL'
);
end;
/
